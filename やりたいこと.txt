【やりたいこと】

C++であるバイナリの列を構造体にキャストすることを考えます。ただ、その構造体の定義は頻繁に変わりうるもので、そうなると都度都度構造体が定義されたヘッダファイルを作り直してはコンパイルする必要があります。それではしんどいのでバイナリの列をパースするためのプログラムはそのままで、次のように対応できるようにしてください。

1. C++のheaderファイルについて、rootとなる構造体名やunion名を指定してxmlに変換する。
    これはC++にこだわるつもりはなく、Pythonで実装する形でもOKです。
2. C++パーサーはxmlを指定してバイナリの列をパースする。
3. 最終的にはJSONとして出力したいです。ただ、外部らのライブラリなどには依存を増やしたくないのでJSON Objectを操作、最終的には.jsonファイルとして出力するためのミニマルなライブラリを自作したうえで実現したいです。

- 構造体は複数のヘッダファイルにまたがって定義される可能性があるので、#includeからいい感じに読みってパースできるようにしてください。
- 各メンバの型はstdintに準拠します。
- 無名構造体や無名unionにもいい感じに対応してください。
- unionや構造体が複雑にネストする場合でも問題なく動くように対応してください。
- 複雑なbitfieldにも対応してください。
- 配列がある場合も考慮してください。
- XMLには計算したoffsetやsizeも記載されていたほうが後々のパースのときに便利かな？
- 1.を実行するときにpackするかしないか（アライメントしないかするか）をオプションで選べるようにしてください。
- 1.を実行するときに出力となるXMLファイルの名前を自由に指定できるようにしてください。
- parseするときはlittle endianをデフォルトとしてください。（オプションで選べるようにして）
- 初列、構造体、union、bitfield、それらの無名なものが複雑に絡み合うケースもサポートしてください。

【その他開発に関して】
- プログラムはgitで管理してちょうどよい規模感でコミットしてください。
- **t-wadaさんの推奨するTDD+ RGRC（Red, Green, Refactor, Commit）** に従って開発を進めてください。
- C++で外部パッケージを使う場合はvcpkgで入れられるものを使ってください。
- ディレクトリ構成を都度見直してきれいにしてください。自分で把握できないファイルが存在しない状態をキープしてください。